from fastapi import FastAPI
from app.core.database import init_db
from app.routes import (
    chat,
    modules,
    system,
    logs,
    users,
    frontend_sync
)
from config.settings import settings  # Se settings.py estiver fora da pasta app

import os
import sys
from datetime import datetime

# üîπ Ajuste no PYTHONPATH para evitar importa√ß√µes quebradas (remova se usar Docker)
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

app = FastAPI(
    title=settings.PROJECT_NAME,
    version=settings.VERSION,
    description="Chat Central - Assistente Inteligente para Gest√£o de Projetos e M√≥dulos"
)

# Inicializa a conex√£o com o banco de dados ao iniciar a API
@app.on_event("startup")
async def startup_event():
    try:
        await init_db()
    except Exception as e:
        print(f"‚ùå Erro ao conectar ao banco de dados: {e}")

# Garante o encerramento correto das conex√µes ao desligar o sistema
@app.on_event("shutdown")
async def shutdown_event():
    print("‚ö†Ô∏è Encerrando conex√µes do banco de dados...")

# Inclui as rotas principais da API
app.include_router(chat.router, prefix="/chat", tags=["Chat Assistente"])
app.include_router(modules.router, prefix="/modules", tags=["M√≥dulos Internos"])
app.include_router(system.router, prefix="/system", tags=["Controle do Sistema"])
app.include_router(logs.router, prefix="/logs", tags=["Monitoramento"])
app.include_router(users.router, prefix="/users", tags=["Usu√°rios e Permiss√µes"])
app.include_router(frontend_sync.router, prefix="/frontend", tags=["Sincroniza√ß√£o Frontend"])

# Endpoint de status do sistema
@app.get("/")
async def health_check():
    return {
        "status": "Online",
        "version": settings.VERSION,
        "timestamp": datetime.utcnow().isoformat()
    }
