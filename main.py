from fastapi import FastAPI
from app.core.database import database
from app.routes import (
    chat,
    modules,
    system,
    logs,
    users,
    frontend_sync
)
from config.settings import settings  # Importa√ß√£o garantida

import logging
from datetime import datetime

# Configura√ß√£o de logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Inicializa√ß√£o do FastAPI
app = FastAPI(
    title=getattr(settings, "PROJECT_NAME", "Chat Central API"),
    version=getattr(settings, "VERSION", "1.0.0"),
    description="Chat Central - Assistente Inteligente para Gest√£o de Projetos e M√≥dulos"
)

# üîπ Evento de startup: Conex√£o com MongoDB e Redis
@app.on_event("startup")
async def startup_event():
    try:
        logger.info("üîπ Iniciando conex√£o com o banco de dados...")
        await database.connect()
        logger.info("‚úÖ Conex√£o com o banco de dados estabelecida com sucesso!")
    except Exception as e:
        logger.error(f"‚ùå Erro ao conectar ao banco de dados: {e}")

# üîπ Evento de shutdown: Fecha conex√µes com MongoDB e Redis corretamente
@app.on_event("shutdown")
async def shutdown_event():
    try:
        logger.warning("‚ö†Ô∏è Encerrando conex√µes do banco de dados...")
        await database.disconnect()
        logger.info("üîå Conex√µes encerradas com sucesso.")
    except Exception as e:
        logger.error(f"‚ùå Erro ao encerrar conex√µes: {e}")

# üîπ Inclui as rotas principais da API
app.include_router(chat.router, prefix="/api//chat", tags=["Chat Assistente"])
app.include_router(modules.router, prefix="/api/modules", tags=["M√≥dulos Internos"])
app.include_router(system.router, prefix="/api/system", tags=["Controle do Sistema"])
app.include_router(logs.router, prefix="/api/logs", tags=["Monitoramento"])
app.include_router(users.router, prefix="/api/users", tags=["Usu√°rios e Permiss√µes"])
app.include_router(frontend_sync.router, prefix="/api/frontend-sync", tags=["Sincroniza√ß√£o Frontend"])

# üîπ Health Check - Verifica status da API e conex√µes do banco
@app.get("/")
async def health_check():
    """
    Verifica o status do sistema e a conex√£o com o banco de dados.
    """
    health_data = {
        "status": "Online",
        "version": getattr(settings, "VERSION", "1.0.0"),
        "timestamp": datetime.utcnow().isoformat(),
        "database": "‚è≥ Verificando...",
        "redis": "‚è≥ Verificando..."
    }

    try:
        if database.client:
            await database.db.command("ping")  # Testa conex√£o MongoDB
            health_data["database"] = "‚úÖ Conectado"
        else:
            health_data["database"] = "‚ùå Erro na conex√£o"
    except Exception:
        health_data["database"] = "‚ùå Erro na conex√£o"

    try:
        redis_conn = await database.get_redis()
        if await redis_conn.ping():
            health_data["redis"] = "‚úÖ Conectado"
        else:
            health_data["redis"] = "‚ùå Erro na conex√£o"
    except Exception:
        health_data["redis"] = "‚ùå Erro na conex√£o"

    return health_data

# üîπ Inicia o servidor Uvicorn quando executado diretamente
if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
